var documenterSearchIndex = {"docs":
[{"location":"appendix/library/#library_api","page":"Library","title":"Library","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Documenting the user interface.","category":"page"},{"location":"appendix/library/#Wall-stress-model","page":"Library","title":"Wall stress model","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [Walrus.WallStressModel]\nprivate = true","category":"page"},{"location":"appendix/library/#Walrus.WallStressModel","page":"Library","title":"Walrus.WallStressModel","text":"WallStressModel\n\nA wall stress model for LES simulation with default parameters similar to that proposed in Schumann (1975), Hartel (1996), Piomelli et al. (1989), and Taylor and Sarkar (2007).\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#Walrus.WallStressModel.WallStress","page":"Library","title":"Walrus.WallStressModel.WallStress","text":"WallStress(; von_Karman_constant = 0.4,\n             kinematic_viscosity = 1e-6,\n             B = 5.2)\n\nReturns a wall stress model for LES simulation with default parameters similar to that proposed in Schumann (1975), Hartel (1996), Piomelli et al. (1989), and Taylor and Sarkar (2007).\n\nKeyword Arguments\n\nvon_Karman_constant: the von Karman wall stress constant\nkinematic_viscosity: kinematic viscosity of the water above the wall\nB: wall stress constant \n\nExample\n\njulia> using Walrus: WallStress\n\njulia> using Oceananigans\n\njulia> wall_stress = WallStress()\n(::WallStress{Float64}) (generic function with 1 method)\njulia> boundary_conditions = (u = FieldBoundaryConditions(bottom = FluxBoundaryCondition(wall_stress, discrete_form = true, parameters = Val(:x))),\n                              v = FieldBoundaryConditions(bottom = FluxBoundaryCondition(wall_stress, discrete_form = true, parameters = Val(:y))))\n(u = Oceananigans.FieldBoundaryConditions, with boundary conditions\n├── west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── bottom: FluxBoundaryCondition: DiscreteBoundaryFunction (::WallStress{Float64}) with parameters Val{:x}\n├── top: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n└── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing), v = Oceananigans.FieldBoundaryConditions, with boundary conditions\n├── west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── bottom: FluxBoundaryCondition: DiscreteBoundaryFunction (::WallStress{Float64}) with parameters Val{:y}\n├── top: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n└── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing))\n\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Walrus.WallStressModel.WallStressBoundaryConditions-Tuple{}","page":"Library","title":"Walrus.WallStressModel.WallStressBoundaryConditions","text":"WallStressBoundaryConditions(; von_Karman_constant = 0.4,\n                               kinematic_viscosity = 1e-6,\n                               B = 5.2)\n\nConvenience constructor to setup WallStress boundary conditions.\n\nKeyword Arguments\n\nvon_Karman_constant: the von Karman wall stress constant\nkinematic_viscosity: kinematic viscosity of the water above the wall\nB: wall stress constant \n\nExample\n\njulia> using Walrus: WallStressBoundaryConditions\n\njulia> using Oceananigans\n\njulia> stress_boundary_conditions = WallStressBoundaryConditions()\n(u = FluxBoundaryCondition: DiscreteBoundaryFunction (::WallStress{Float64}) with parameters Val{:x}, v = FluxBoundaryCondition: DiscreteBoundaryFunction (::WallStress{Float64}) with parameters Val{:y})\njulia> boundary_conditions = (u = FieldBoundaryConditions(bottom = stress_boundary_conditions.u),\n                              v = FieldBoundaryConditions(bottom = stress_boundary_conditions.v))\n(u = Oceananigans.FieldBoundaryConditions, with boundary conditions\n├── west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── bottom: FluxBoundaryCondition: DiscreteBoundaryFunction (::WallStress{Float64}) with parameters Val{:x}\n├── top: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n└── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing), v = Oceananigans.FieldBoundaryConditions, with boundary conditions\n├── west: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── east: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── south: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── north: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n├── bottom: FluxBoundaryCondition: DiscreteBoundaryFunction (::WallStress{Float64}) with parameters Val{:y}\n├── top: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing)\n└── immersed: DefaultBoundaryCondition (FluxBoundaryCondition: Nothing))\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Radiative-transfer-models","page":"Library","title":"Radiative transfer models","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [Walrus.RadiativeTransfer]\nprivate = true","category":"page"},{"location":"appendix/library/#Walrus.RadiativeTransfer","page":"Library","title":"Walrus.RadiativeTransfer","text":"RadiativeTransfer\n\nIncludes models for ratiative transfer through water which can induce body heating\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#Walrus.RadiativeTransfer.HomogeneousBodyHeating","page":"Library","title":"Walrus.RadiativeTransfer.HomogeneousBodyHeating","text":"HomogeneousBodyHeating\n\nA model for single band light attenuation which heats the water in the form: I(x y z) = I_0(x y) * expleft(-alpha zright) where I is the radiation intensity and alpha is the attenuation coefficient. This heats the water like fracpartial T(x y z)partial t = fracI(x y z)Ac^prho where A is the area of the cell, c^p is the specific heat capacity and rho is the water density. \n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Walrus.RadiativeTransfer.HomogeneousBodyHeating-Tuple{}","page":"Library","title":"Walrus.RadiativeTransfer.HomogeneousBodyHeating","text":"HomogeneousBodyHeating(; surface_flux,\n                         water_attenuation_coefficient = 1.8,\n                         water_heat_capacity = 3991.0, # J K⁻¹ kg⁻¹\n                         water_density = 1026.0) # kg m⁻³\n\nCreates a model in which a surface_flux (W / m²) is attenuated by and heats the water. This interacts with Oceananigans as a body forcing.\n\nKeyword Arguments\n\nsurface_flux (required): a function returning the surface radiaiton flux in the form surface_flux(x, y, t)\nwater_attenuation_coefficient: the radiation attenuation coefficient of the water\nwater_heat_capacity: the specific heat capacity of the water\nwater_density: density of the water\n\nExample\n\njulia> using Walrus: HomogeneousBodyHeating\n\njulia> using Oceananigans\n\njulia> grid = RectilinearGrid(size = (128, 128, 128), extent = (1000, 1000, 1000))\n128×128×128 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── Periodic x ∈ [0.0, 1000.0)  regularly spaced with Δx=7.8125\n├── Periodic y ∈ [0.0, 1000.0)  regularly spaced with Δy=7.8125\n└── Bounded  z ∈ [-1000.0, 0.0] regularly spaced with Δz=7.8125\njulia> body_heating = HomogeneousBodyHeating(; surface_flux = (x, y, t) -> 100)\n┌ Warning: This radiative heating model is untested\n└ @ Walrus.RadiativeTransfer ~/Documents/Projects/Walrus.jl/src/radiative_transfer/homogeneous_body_heating.jl:75\n(::HomogeneousBodyHeating{Float64, var\"#1#2\"}) (generic function with 1 method)\n\njulia> model = NonhydrostaticModel(; grid, forcing = (; T = Forcing(body_heating, discrete_form=true)), tracers = :T)\nNonhydrostaticModel{CPU, RectilinearGrid}(time = 0 seconds, iteration = 0)\n├── grid: 128×128×128 RectilinearGrid{Float64, Oceananigans.Grids.Periodic, Oceananigans.Grids.Periodic, Oceananigans.Grids.Bounded} on Oceananigans.Architectures.CPU with 3×3×3 halo\n├── timestepper: QuasiAdamsBashforth2TimeStepper\n├── tracers: T\n├── closure: Nothing\n├── buoyancy: Nothing\n└── coriolis: Nothing\n\n\n\n\n\n","category":"method"},{"location":"appendix/library/#Tidal-forcing-models","page":"Library","title":"Tidal forcing models","text":"","category":"section"},{"location":"appendix/library/","page":"Library","title":"Library","text":"Modules = [Walrus.TidalForcings]\nprivate = true","category":"page"},{"location":"appendix/library/#Walrus.TidalForcings","page":"Library","title":"Walrus.TidalForcings","text":"TidalForcing\n\nProvides quick setup of tidal forcing\n\n\n\n\n\n","category":"module"},{"location":"appendix/library/#Walrus.TidalForcings.Tide","page":"Library","title":"Walrus.TidalForcings.Tide","text":"Tide(; x_amplitude, \n       y_amplitude, \n       period = 12.3782216453hours,\n       nodal_time = 0., \n       x_lag = 0., \n       y_lag = 0.,\n       coriolis = nothing)\n\nSets up a model of tidal forcing with default parameters of an M2 tide.\n\nKeyword Arguments\n\nx_amplitude: the tidal amplitude in the x direction\ny_amplitude: the tidal amplitude in the x direction\nperiod: the tidal period (defaults to that of an M2 tide)\nnodal_time: the time at which peak flow occurs\nx_lag: the phase lag for the tidal component in the x direction\ny_lag: the phase lag for the tidal component in the y direction\ncoriolis: a model for the coriolis parameter \n\nExample\n\njulia> using Walrus: Tide\n\njulia> using Oceananigans\n\njulia> tide = Tide(x_amplitude = 0.1, y_amplitude = 0.)\n(::Tide{Float64, Nothing}) (generic function with 2 methods)\njulia> forcing = (u = Forcing(tide, parameters = Val(:x), discrete_form = true),\n                  v = Forcing(tide, parameters = Val(:y), discrete_form = true))\n(u = DiscreteForcing{Val{:x}}\n├── func: (::Tide{Float64, Nothing}) (generic function with 2 methods)\n└── parameters: Val{:x}(), v = DiscreteForcing{Val{:y}}\n├── func: (::Tide{Float64, Nothing}) (generic function with 2 methods)\n└── parameters: Val{:y}())\n\n\n\n\n\n","category":"type"},{"location":"appendix/library/#Walrus.TidalForcings.TidalForcing-Tuple{}","page":"Library","title":"Walrus.TidalForcings.TidalForcing","text":"TidalForcing(; x_amplitude,\n               y_amplitude,\n               period = 12.3782216453hours,\n               nodal_time = 0.,\n               x_lag = 0.,\n               y_lag = 0.,\n               coriolis = nothing)\n\nA convenience constructor for Tide which returns the forcings pre wrapped.\n\nKeyword Arguments\n\nx_amplitude: the tidal amplitude in the x direction\ny_amplitude: the tidal amplitude in the x direction\nperiod: the tidal period (defaults to that of an M2 tide)\nnodal_time: the time at which peak flow occurs\nx_lag: the phase lag for the tidal component in the x direction\ny_lag: the phase lag for the tidal component in the y direction\ncoriolis: a model for the coriolis parameter \n\nExample\n\njulia> using Walrus: TidalForcing\n\njulia> tidal_forcing = TidalForcing(x_amplitude = 0.1, y_amplitude = 0.)\n(u = DiscreteForcing{Val{:x}}\n├── func: (::Tide{Float64, Nothing}) (generic function with 2 methods)\n└── parameters: Val{:x}(), v = DiscreteForcing{Val{:y}}\n├── func: (::Tide{Float64, Nothing}) (generic function with 2 methods)\n└── parameters: Val{:y}())\n\n\n\n\n\n","category":"method"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Hartel, C. (1996). Chapter 5 - Turbulent flows: Direct numerical simulation and large-eddy simulation. In: Handbook of Computational Fluid Mechanics, edited by Peyret, R. (Academic Press, London); pp. 283–338.\n\n\n\nPiomelli, U.; Ferziger, J.; Moin, P. and Kim, J. (1989). New approximate boundary conditions for large eddy simulations of wall‐bounded flows. Physics of Fluids A: Fluid Dynamics 1, 1061–1068, arXiv:https://pubs.aip.org/aip/pof/article-pdf/1/6/1061/12366739/1061_1_online.pdf.\n\n\n\nSchumann, U. (1975). Subgrid scale model for finite difference simulations of turbulent flows in plane channels and annuli. Journal of Computational Physics 18, 376–404.\n\n\n\nTaylor, J. R. and Sarkar, S. (2007). Internal gravity waves generated by a turbulent bottom Ekman layer. Journal of Fluid Mechanics 590, 331–354.\n\n\n\n","category":"page"},{"location":"coming-soon/#Coming-soon","page":"Quick start","title":"Coming soon","text":"","category":"section"},{"location":"coming-soon/","page":"Quick start","title":"Quick start","text":"...","category":"page"},{"location":"appendix/function_index/#Index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"appendix/function_index/","page":"Function index","title":"Function index","text":"","category":"page"},{"location":"#Walrus","page":"Home","title":"Walrus","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Walrus.jl is a Julia package providing various closures models (closure -> seal -> seal 🦭 -> walrus) for ocean flavoured fluid dynamics with Oceananigans.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, it includes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"WallStress: a wall stress model for LES\nTidalForcing: simple body forcing to replicate tides\nRadiativeHeating: a simple radiative transfer model that imparts a body heating","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you have any questions or suggestions please get in touch through an issue.","category":"page"}]
}
